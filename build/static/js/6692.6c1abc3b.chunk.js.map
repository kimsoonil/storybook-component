{"version":3,"file":"static/js/6692.6c1abc3b.chunk.js","mappings":"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","sources":["components/SignUp/SignUp/CountdownCode.jsx","components/SignUp/AuthConfirm.jsx","components/UserInfo/NickName.jsx","components/UserInfo/AccountEdit.jsx","components/UserInfo/Account.jsx","components/UserInfo/Sns.jsx","components/UserInfo/AccountManagement.jsx","components/UserInfo/index.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Countdown from 'react-countdown';\n\nfunction CountdownCode({ isConfirm, reStartCountDown, onComplete, timeLimit = 1000 * 60 * 5 }) {\n  const countdownRef = useRef();\n\n  useEffect(() => {\n    console.log('reStartCountDown');\n    console.log(reStartCountDown);\n    countdownRef.current.start();\n  }, [reStartCountDown]);\n\n  useEffect(() => {\n    if (isConfirm) countdownRef.current.stop();\n  }, [isConfirm]);\n\n  return (\n    <Countdown\n      date={Date.now() + timeLimit}\n      autoStart={false}\n      ref={countdownRef}\n      intervalDelay={0}\n      onComplete={onComplete}\n      renderer={({ minutes, seconds }) =>\n        reStartCountDown > 0 &&\n        !isConfirm && (\n          <span>\n            {minutes}:{seconds}\n          </span>\n        )\n      }\n    />\n  );\n}\n\nexport default React.memo(CountdownCode);\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useForm, useWatch } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { reset as authEmailReset, reqAuthEmail } from 'redux/store/common/authEmailSlice';\nimport { reset as authCodeReset, reqAuthCode } from 'redux/store/common/authCodeSlice';\nimport { showPopup } from 'redux/store/common/popupSlice';\nimport CountdownCode from 'components/SignUp/SignUp/CountdownCode';\nimport {\n  USER_INFO_SIGNUP,\n  USER_INFO_EMAIL,\n  AUTH_SEND_EMAIL_INTERVAL,\n  USER_INFO_EDIT,\n  AUTH_CODE_LENGTH,\n  SEND_AUTH_CODE_TIME_LIMIT,\n  POPUP_TYPE_LOGIN_ALERT,\n  VERIFY_SEND_SOURCE_EMAIL\n} from 'constants/type';\n\nfunction SuccessAuthForm({ isConfirm, email }) {\n  return (\n    <div className={classNames('form_wrap', 'msg', 'btn_set_under', 'success', { hidden: !isConfirm })}>\n      <span className=\"form_cell form_input input_md\">\n        <input type=\"text\" title=\"input default\" id=\"input_text\" aria-invalid=\"false\" defaultValue={email} />\n        <div className=\"dot success\">\n          <span className=\"a11y\">성공</span>\n        </div>\n      </span>\n      <span className=\"success_txt msg\" id=\"input_alert\">\n        Authentication completed!\n      </span>\n    </div>\n  );\n}\n\nfunction AuthConfirm({ editType = USER_INFO_SIGNUP, verifyType, formWrapClass }) {\n  const [isSend, setIsSend] = useState(false);\n  const [isSendable, setIsSendable] = useState(true);\n  const [placeHolder, setPlaceHolder] = useState('');\n  const [reStartCountDown, setReStartCountDown] = useState(0);\n  const codeRef = useRef();\n  const dispatch = useDispatch();\n  const reqType = USER_INFO_EMAIL;\n\n  const { isConfirm } = useSelector((state) => ({ ...state.authCode }));\n  // const { email } = useSelector((state) => ({ ...state.signUp.userInfo }));\n  const {\n    register,\n    trigger,\n    getValues,\n    setValue,\n    control,\n    clearErrors,\n    formState: { errors }\n  } = useForm();\n  const watchCode = useWatch({ control, name: 'code', defaultValue: '' });\n  const watchEmail = useWatch({ control, name: reqType, defaultValue: '' });\n\n  const { t } = useTranslation();\n  const authCodeText = 'Auth Code';\n\n  const onAuthCode = useCallback(() => {\n    dispatch(\n      reqAuthCode({\n        email: getValues('email'),\n        verify_source: VERIFY_SEND_SOURCE_EMAIL,\n        verify_type: verifyType,\n        code: getValues('code')\n      })\n    );\n  }, [watchCode]);\n\n  const onResetCode = useCallback(() => {\n    setValue('code', '');\n    dispatch(authCodeReset());\n  }, []);\n\n  const onAuthEmail = () => {\n    console.log('reStartCountDown', reStartCountDown);\n    const contents = `The verification email has been ${reStartCountDown > 0 ? 're-' : ''}sent.`;\n\n    dispatch(showPopup({ type: POPUP_TYPE_LOGIN_ALERT, contents }));\n    setIsSend(true);\n    setIsSendable(false);\n    onResetCode();\n    setReStartCountDown(reStartCountDown + 1);\n\n    dispatch(\n      reqAuthEmail({\n        email: getValues(reqType),\n        verify_source: VERIFY_SEND_SOURCE_EMAIL,\n        verify_type: verifyType\n      })\n    );\n  };\n\n  const onResetEmail = useCallback(() => {\n    setIsSend(false);\n    clearErrors();\n    if (reqType === USER_INFO_EMAIL) setValue(reqType, '');\n  }, []);\n\n  // reset\n  useEffect(() => {\n    dispatch(authCodeReset());\n    dispatch(authEmailReset());\n  }, []);\n\n  useEffect(() => {\n    const placeHolderTxt = 'superclub@ccr.co.kr';\n    // if (editType === USER_INFO_SIGNUP) {\n    //   placeHolderTxt = reqType === USER_INFO_EMAIL ? 'test@test.com' : '010-1234-1234';\n    // } else {\n    //   placeHolderTxt = reqType === USER_INFO_EMAIL ? email : phoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3');\n    //   if (reqType === USER_INFO_EMAIL) setValue(USER_INFO_EMAIL, placeHolderTxt);\n    //   else setValue(USER_INFO_PHONE, placeHolderTxt);\n    // }\n\n    setPlaceHolder(placeHolderTxt);\n  }, [reqType]);\n\n  useEffect(() => {\n    if (!isSendable)\n      setTimeout(() => {\n        setIsSendable(true);\n      }, AUTH_SEND_EMAIL_INTERVAL);\n  }, [isSendable]);\n\n  //   useEffect(() => {\n  //     if (reqType === USER_INFO_EMAIL) return;\n\n  //     if (watchPhoneNumber.length === PHONE_NUMBER_LENGTH) {\n  //       setValue('phone', watchPhoneNumber.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3'));\n  //     }\n  //     if (watchPhoneNumber.length === PHONE_NUMBER_INCLUDE_HYPHEN_LENGTH) {\n  //       setValue('phone', watchPhoneNumber.replace(/-/g, '').replace(/(\\d{3})(\\d{4})(\\d{4})/, '$1-$2-$3'));\n  //     }\n  //   }, [watchPhoneNumber]);\n  return (\n    <>\n      <div\n        className={classNames(\n          'form_wrap',\n          'msg',\n          'btn_set',\n          'success',\n          { account: formWrapClass },\n          { hidden: isConfirm }\n        )}\n      >\n        <span className={classNames('form_cell form_input input_md', { default: !formWrapClass }, 'between')}>\n          <div className=\"input_set\">\n            <input\n              id={reqType}\n              type=\"text\"\n              placeholder={placeHolder}\n              aria-invalid={isSend}\n              {...register(reqType, {\n                required: t('validation.require', { require: reqType }),\n                pattern: {\n                  value: /\\S+@\\S+\\.\\S+/,\n                  message: t('validation.emailauth.email')\n                }\n              })}\n              disabled={isSend || isConfirm || editType === USER_INFO_EDIT}\n            />\n            {watchEmail && (\n              <button type=\"button\" className=\"btn_reset\" onClick={onResetEmail}>\n                <span className=\"a11y\">삭제</span>\n              </button>\n            )}\n\n            {/* <div class=\"dot error\">\n            <span class=\"a11y\">실패</span>\n          </div> */}\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn primary button_md\"\n            onClick={async () => {\n              const result = await trigger(reqType);\n              if (result) onAuthEmail();\n            }}\n            disabled={!watchEmail || !isSendable}\n          >\n            <span>{t('label.emailauth.auth')}</span>\n          </button>\n        </span>\n        {errors.email && (\n          <span className=\"error_msg msg\" id=\"input_error\">\n            {errors.email.message}\n          </span>\n        )}\n      </div>\n      <div className={classNames('form_wrap', 'msg', 'btn_set', 'success', { hidden: !isSend || isConfirm })}>\n        <span className=\"form_cell form_input input_md between\">\n          <div className=\"input_set\">\n            <input\n              id=\"code\"\n              type=\"code\"\n              ref={codeRef}\n              placeholder=\"Auth Code\"\n              maxLength={AUTH_CODE_LENGTH}\n              {...register('code', {\n                required: t('validation.require', { require: authCodeText })\n              })}\n              // disabled={!isSend}\n            />\n            <span className=\"guide_text time\">\n              <span>\n                <CountdownCode\n                  isConfirm={isConfirm}\n                  reStartCountDown={reStartCountDown}\n                  onComplete={onResetCode}\n                  timeLimit={SEND_AUTH_CODE_TIME_LIMIT}\n                />\n              </span>\n            </span>\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn primary button_md\"\n            onClick={() => {\n              trigger('code');\n              onAuthCode();\n            }}\n            disabled={watchCode?.length !== AUTH_CODE_LENGTH}\n          >\n            <span>Confirm</span>\n          </button>\n        </span>\n\n        {/* <span className=\"success_txt msg\" id=\"input_alert\">\n          Authentication completed!\n        </span> */}\n        {/* <span className=\"success_txt msg\" id=\"input_alert\">\n        Authentication completed!\n      </span> */}\n        {/* <span class=\"error_txt msg\" id=\"input_alert\">The authentication code is incorrect.</span> */}\n        {/* <span class=\"default_txt msg\" id=\"input_alert\">If you didn’t receive the code, click the Authenticate button again.</span> */}\n        {/* <span class=\"default_txt msg\" id=\"input_alert\">You can authenticate to another email registered in your account.</span> */}\n        {/* <span class=\"error_txt msg\" id=\"input_error\">No matching email account found.</span> */}\n        {/* <span class=\"error_txt msg\" id=\"input_error\">The authentication code is incorrect.</span> */}\n        {/* <span class=\"success_txt msg\" id=\"input_success\">Authentication completed!</span> */}\n      </div>\n      <SuccessAuthForm isConfirm={isConfirm} email={watchEmail} />\n    </>\n  );\n}\n\nexport default AuthConfirm;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { useForm } from 'react-hook-form';\nimport { reqChangeNickname } from 'redux/store/common/changeNicknameSlice';\n// import { useTranslation } from 'react-i18next';\nimport { updateNicknameStatus } from 'redux/store/common/logInSlice';\nimport {\n  NICKNAME_STATUS_INIT,\n  NICKNAME_STATUS_CHANGE,\n  NICKNAME_STATUS_SAVED,\n  POPUP_TYPE_NICKNAME_CONFIRM\n} from 'constants/type';\nimport { showPopup } from 'redux/store/common/popupSlice';\n\nfunction InitNickname({ nickname, tag, setStatus }) {\n  return (\n    <div className=\"form_wrap\">\n      <span className=\"form_cell form_input input_lg between\">\n        <span className=\"nickname_set\">\n          <input\n            type=\"text\"\n            title=\"input default\"\n            id=\"input_text\"\n            aria-invalid=\"false\"\n            defaultValue={`${nickname}#${tag}`}\n            readOnly=\"readonly\"\n          />\n        </span>\n        <button type=\"button\" className=\"btn primary button_lg\" onClick={() => setStatus(NICKNAME_STATUS_CHANGE)}>\n          <span>Change Nickname</span>\n        </button>\n      </span>\n    </div>\n  );\n}\n\nfunction SaveNickname({ tag, newNick, setNewNick, onEditNickname, errors }) {\n  const NICKNAME_MAXLENGTH = 20;\n  return (\n    <div className=\"form_wrap\">\n      <span className=\"form_cell form_input msg input_lg align\">\n        <div className=\"num01\">\n          <input\n            type=\"text\"\n            title=\"input default\"\n            id=\"input_text\"\n            aria-invalid=\"false\"\n            placeholder=\"Please enter your Nickname\"\n            maxLength={NICKNAME_MAXLENGTH}\n            value={newNick}\n            onChange={(e) => setNewNick(e.target.value)}\n          />\n          <span className=\"guide_text num\">\n            <span>{newNick?.length}</span>/20\n          </span>\n        </div>\n        <div className=\"num02\">\n          <input\n            type=\"text\"\n            className=\"nopadding\"\n            title=\"input default\"\n            id=\"input_text\"\n            aria-invalid=\"false\"\n            defaultValue={tag}\n            disabled\n          />\n        </div>\n        <button type=\"button\" className=\"btn primary button_lg\" onClick={onEditNickname}>\n          <span>Save Nickname</span>\n        </button>\n        {errors.nickName && <small role=\"alert\">{errors.nickName}</small>}\n      </span>\n    </div>\n  );\n}\n\nfunction CompleteNickname() {\n  return (\n    <div className=\"form_wrap\">\n      <span className=\"form_cell form_input msg input_lg fix_nick\">\n        <input\n          type=\"text\"\n          title=\"input default\"\n          id=\"input_text\"\n          aria-invalid=\"false\"\n          defaultValue=\"kitty$1004#FGS2G\"\n          readOnly=\"readonly\"\n        />\n        <span className=\"fix_ico\" />\n      </span>\n      <div className=\"toast default show\">\n        <span>Your nickname changed successfully.</span>\n      </div>\n    </div>\n  );\n}\n\nfunction GuideMessage({ status }) {\n  return (\n    <ul className=\"guide\">\n      <li style={{ display: status === NICKNAME_STATUS_INIT ? 'inline-block' : 'none' }}>\n        Try changing the temporary nickname automatically specified when you sign up.\n      </li>\n      <li>\n        You can change your nickname <span>only once</span>, so please think carefully before deciding.\n      </li>\n      <li style={{ display: status === NICKNAME_STATUS_CHANGE ? 'inline-block' : 'none' }}>\n        Nicknames can be <span>up to 16 bytes</span> and only be entered in English, Korean, Chinese, Japanese, and some\n        special characters. ~ ! @ # $ % ^ &amp; * ( ) _ + = , . &lt; &gt; ?\n      </li>\n    </ul>\n  );\n}\n\nfunction NickName({ user, visibleInfo, nickStatus, setNickStatus }) {\n  const { nickname, tag } = user;\n  // const [nickStatus, setNickStatus] = useState(status);\n  const [newNick, setNewNick] = useState('');\n  const [errors, setErrors] = useState({ nickName: '' });\n  const { accountInfo, error } = useSelector((state) => ({ ...state.changeNickname }));\n  const { isConfirm } = useSelector((state) => ({ ...state.popup }));\n\n  const dispatch = useDispatch();\n  // const { t } = useTranslation();\n\n  const onEditNickname = () => {\n    console.log('onEditNickname');\n    dispatch(showPopup({ type: POPUP_TYPE_NICKNAME_CONFIRM, contents: `${newNick}#${tag}` }));\n  };\n\n  useEffect(() => {\n    if (isConfirm && newNick) {\n      dispatch(reqChangeNickname({ nickname: newNick }));\n    }\n  }, [isConfirm]);\n\n  // 변경 실패\n  useEffect(() => {\n    if (error !== '') setErrors({ nickName: error });\n  }, [error]);\n\n  // nickname update 됐을 경우 login에 상태변경\n  useEffect(() => {\n    if (!accountInfo.nickname_is_new && newNick) {\n      setNickStatus(NICKNAME_STATUS_SAVED);\n      dispatch(updateNicknameStatus());\n    }\n  }, [accountInfo.nickname_is_new]);\n\n  return (\n    <div className=\"layer\">\n      {visibleInfo && <div className=\"layer_block\" />}\n      <div className=\"nickname\">\n        <h4 className=\"h4Type eng\">Nickname</h4>\n        {nickStatus === NICKNAME_STATUS_INIT && (\n          <InitNickname nickname={nickname} tag={tag} setStatus={setNickStatus} />\n        )}\n        {nickStatus === NICKNAME_STATUS_CHANGE && (\n          <SaveNickname\n            tag={tag}\n            newNick={newNick}\n            setNewNick={setNewNick}\n            onEditNickname={onEditNickname}\n            errors={errors}\n          />\n        )}\n        {nickStatus === NICKNAME_STATUS_SAVED && <CompleteNickname />}\n        <GuideMessage status={nickStatus} />\n      </div>\n    </div>\n  );\n}\n\nexport default NickName;\n","import React from 'react';\nimport { VERIFY_SEND_TYPE_CHANGE } from 'constants/type';\nimport AuthConfirm from 'components/SignUp/AuthConfirm';\n\nfunction AccountEdit({ user }) {\n  const { email, phone } = user;\n  return (\n    <div className=\"account\">\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">Account ID</label>\n        <span className=\"form_cell form_input input_lg between\">\n          <span className=\"account_set\">\n            <input\n              type=\"text\"\n              title=\"input default\"\n              id=\"input_text\"\n              aria-invalid=\"false\"\n              defaultValue={email}\n              readOnly=\"readonly\"\n            />\n          </span>\n          <button type=\"button\" className=\"btn primary_line button_lg\">\n            <span>Change Password</span>\n          </button>\n        </span>\n      </div>\n      <AuthConfirm verifyType={VERIFY_SEND_TYPE_CHANGE} formWrapClass=\"account\" />\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">Cellphone</label>\n        <div className=\"HGroup\">\n          <span className=\"form_cell form_input input_md default flex tel\">\n            <div className=\"select_wrap\">\n              <div className=\"select tel\">\n                <div className=\"selected\">\n                  <div className=\"selected-value\">+82</div>\n                  <button type=\"button\" className=\"arrow\">\n                    <span className=\"a11y\">선택</span>\n                  </button>\n                </div>\n                <ul>\n                  <li className=\"option\">82</li>\n                  <li className=\"option\">010</li>\n                  <li className=\"option\">011</li>\n                  <li className=\"option\">016</li>\n                  <li className=\"option\">017</li>\n                  <li className=\"option\">018</li>\n                  <li className=\"option\">019</li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"input_set\">\n              <input\n                type=\"text\"\n                title=\"input default\"\n                id=\"input_text\"\n                aria-invalid=\"false\"\n                placeholder=\"Please enter your phone number\"\n                defaultValue={phone}\n              />\n              <button className=\"btn_reset\">\n                <span className=\"a11y\">삭제</span>\n              </button>\n            </div>\n            <button type=\"button\" className=\"btn primary button_md\" disabled>\n              <span>Authenticate</span>\n            </button>\n          </span>\n        </div>\n        {/* 휴대폰전화 등록번호\n  <span class=\"form_cell email form_input input_md default between\">\n    <div class=\"input_set\">\n      <input type=\"text\" title=\"input default\" id=\"input_text\" aria-invalid=\"false\" value=\"082  010 - 2345 - 6789\" disabled>\n        <button class=\"btn_reset\">\n          <span class=\"a11y\">삭제</span>\n        </button>\n    </div>\n    <button type=\"button\" class=\"btn primary button_md\">\n      <span>Authenticate</span>\n    </button>\n  </span>\n        */}\n        {/* 휴대폰등록 인증번호 입력\n  <span class=\"form_cell email form_input input_md between hidden\">\n    <div class=\"input_set\">\n      <input type=\"text\" title=\"input default\" id=\"input_text\" aria-invalid=\"false\" placeholder=\"Authentication code\">\n        <span class=\"guide_text time\">\n          <span>2:59</span>\n        </span>\n    </div>\n    <button type=\"button\" class=\"btn primary button_md\" disabled>\n      <span>Confirm</span>\n    </button>\n  </span>\n  <span class=\"error_txt msg\" id=\"input_alert\">Authentication completed!</span>\n        */}\n      </div>\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">Marketing Receipt Consent</label>\n        <div className=\"HGroup toggle\">\n          <span className=\"form_cell type_toggle\">\n            <span>SMS</span>\n            <input type=\"checkbox\" id=\"check10\" defaultChecked />\n            <label htmlFor=\"check10\" />\n          </span>\n          <span className=\"form_cell type_toggle\">\n            <span>E-mail</span>\n            <input type=\"checkbox\" id=\"check10\" defaultChecked />\n            <label htmlFor=\"check10\" />\n          </span>\n        </div>\n      </div>\n      <ul className=\"guide\">\n        <li>If you agree to receive marketing, you can receive various event information from the super club.</li>\n      </ul>\n      <div className=\"page_btn_wrap full\">\n        <button type=\"button\" className=\"btn primary button_xl\">\n          <span>Save your Account</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default AccountEdit;\n","import React from 'react';\nimport { NICKNAME_STATUS_CHANGE } from 'constants/type';\nimport AccountEdit from './AccountEdit';\n\nfunction AccountInfo({ user }) {\n  const { phone, email } = user;\n  return (\n    <div className=\"account\">\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">Account ID</label>\n        <span className=\"form_cell form_input input_lg between\">\n          <span className=\"account_set\">\n            <input\n              type=\"text\"\n              title=\"input default\"\n              id=\"input_text\"\n              aria-invalid=\"false\"\n              defaultValue={email}\n              readOnly=\"readonly\"\n            />\n          </span>\n          <button type=\"button\" className=\"btn primary_line button_lg\" disabled>\n            <span>Change Password</span>\n          </button>\n        </span>\n      </div>\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">E-mail</label>\n        <span className=\"form_cell form_input input_lg\">\n          <input\n            type=\"text\"\n            title=\"input default\"\n            id=\"input_text\"\n            aria-invalid=\"false\"\n            defaultValue={email}\n            readOnly=\"readonly\"\n          />\n        </span>\n      </div>\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">Cellphone</label>\n        <span className=\"form_cell form_input input_lg between\">\n          <input\n            type=\"text\"\n            title=\"input default\"\n            id=\"input_text\"\n            aria-invalid=\"false\"\n            placeholder=\"Please register your cell phone number\"\n            readOnly=\"readonly\"\n            defaultValue={phone}\n          />\n        </span>\n      </div>\n      <div className=\"form_wrap\">\n        <label className=\"account_label\">Marketing Receipt Consent</label>\n        <div className=\"HGroup toggle\">\n          <span className=\"form_cell type_toggle\">\n            <span>SMS</span>\n            <input type=\"checkbox\" id=\"check10\" defaultChecked disabled />\n            <label htmlFor=\"check10\" />\n          </span>\n          <span className=\"form_cell type_toggle\">\n            <span>E-mail</span>\n            <input type=\"checkbox\" id=\"check10\" defaultChecked disabled />\n            <label htmlFor=\"check10\" />\n          </span>\n        </div>\n      </div>\n      <ul className=\"guide\">\n        <li>If you agree to receive marketing, you can receive various event information from the super club.</li>\n      </ul>\n      <div className=\"page_btn_wrap full\">\n        <button type=\"button\" className=\"btn primary button_xl\" disabled>\n          <span>Save your Account</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Account({ user, visibleInfo, setVisibleInfo, nickStatus }) {\n  return (\n    <div className=\"layer\">\n      <div className=\"account_title\">\n        <h4 className=\"h4Type eng\">Account Infomation</h4>\n        <button\n          type=\"button\"\n          className=\"btn_modify\"\n          onClick={() => setVisibleInfo(!visibleInfo)}\n          disabled={nickStatus === NICKNAME_STATUS_CHANGE}\n        >\n          <span>{visibleInfo ? 'Cancel' : 'Modify'}</span>\n        </button>\n      </div>\n      {visibleInfo ? <AccountEdit user={user} /> : <AccountInfo user={user} />}\n    </div>\n  );\n}\n\nexport default Account;\n","import React from 'react';\n\nfunction Sns({ visibleInfo }) {\n  return (\n    <div className=\"layer\">\n      {/* 계정정보 변경 및 등록시에는 상하의 다른 레이어들을 block처리하여 다른버튼이 눌리지 않게 구현.\n      (UI상 화면에 노출되지만 위에 막이 씌어져서 클릭이 되지 않는 형태로 구현해주세요)             \n      <div class=\"layer_block\"></div>\n    */}\n      {visibleInfo && <div className=\"layer_block\" />}\n      <h4 className=\"h4Type eng\">SNS Interworking</h4>\n      <div className=\"interworking\">\n        <span className=\"inter_text\">Log in easily by connecting to your SNS account.</span>\n        <ul className=\"sns_list\">\n          <li className=\"google connect\">\n            <dl>\n              <dt className=\"logo\" />\n              <dd className=\"join_date connect des eng\">2022-09-22</dd>\n            </dl>\n            <button type=\"button\" className=\"btn primary button_xs\">\n              <span>Connecting</span>\n            </button>\n            <div className=\"connect_leyer\">\n              <span>adasdfsafargsfsdfsdfsfsfsdfesgsdrthdtyjtyh@gmail.com</span>\n            </div>\n          </li>\n          <li className=\"twitter connect\">\n            <dl>\n              <dt className=\"logo\" />\n              <dd className=\"join_date connect des eng\">2022-09-22</dd>\n            </dl>\n            <button type=\"button\" className=\"btn primary button_xs\">\n              <span>Connecting</span>\n            </button>\n            <div className=\"connect_leyer\">\n              <span>adasdfsafargsfsdfsdfsfsfsdfesgsdrthdtyjtyh@gmail.com</span>\n            </div>\n          </li>\n          <li className=\"facebook connect\">\n            <dl>\n              <dt className=\"logo\" />\n              <dd className=\"join_date connect des eng\">2022-09-22</dd>\n            </dl>\n            <button type=\"button\" className=\"btn primary button_xs\">\n              <span>Connecting</span>\n            </button>\n            <div className=\"connect_leyer\">\n              <span>adasdfsafargsfsdfsdfsfsfsdfesgsdrthdtyjtyh@gmail.com</span>\n            </div>\n          </li>\n          <li className=\"apple connect\">\n            <dl>\n              <dt className=\"logo\" />\n              <dd className=\"join_date connect des eng\">2022-09-22</dd>\n            </dl>\n            <button type=\"button\" className=\"btn primary button_xs\">\n              <span>Connecting</span>\n            </button>\n            <div className=\"connect_leyer\">\n              <span>adasdfsafargsfsdfsdfsfh@gmail.com</span>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Sns;\n","/* eslint-disable no-undef */\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Header from 'components/common/header/Header';\nimport Footer from 'components/common/footer/Footer';\nimport { NICKNAME_STATUS_INIT, NICKNAME_STATUS_SAVED } from 'constants/type';\nimport NickName from './NickName';\nimport Account from './Account';\nimport Sns from './Sns';\n\nfunction AccountManagement() {\n  const { user } = useSelector((state) => ({ ...state.logIn }));\n  const [nickStatus, setNickStatus] = useState(user.nickname_is_new ? NICKNAME_STATUS_INIT : NICKNAME_STATUS_SAVED);\n  const [visibleInfo, setVisibleInfo] = useState(false);\n\n  return (\n    <div id=\"wrap\">\n      <Header />\n      <div id=\"main\">\n        <div id=\"container\" className=\"subpage\">\n          <div className=\"sidemenu\" />\n          <div className=\"content\">\n            <h3 className=\"h3Type eng center\">ACCOUNT SETTING</h3>\n            {/* Nickname */}\n            <NickName user={user} visibleInfo={visibleInfo} nickStatus={nickStatus} setNickStatus={setNickStatus} />\n            {/* Account Infomation Modify */}\n            <Account user={user} visibleInfo={visibleInfo} setVisibleInfo={setVisibleInfo} nickStatus={nickStatus} />\n            {/* SNS Interworking */}\n            <Sns visibleInfo={visibleInfo} />\n          </div>\n          <button type=\"button\" className=\"btn_topmove\">\n            <span className=\"a11y\">최상위로 이동</span>\n          </button>\n        </div>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default AccountManagement;\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\n\nimport AccountManagement from 'components/UserInfo/AccountManagement';\n\nfunction index() {\n  return (\n    <Routes>\n      <Route path=\"account\" element={<AccountManagement />} />\n      <Route path=\"/*\" element={<AccountManagement />} />\n    </Routes>\n  );\n}\n\nexport default index;\n"],"names":["CountdownCode","isConfirm","reStartCountDown","onComplete","timeLimit","countdownRef","useRef","useEffect","console","log","current","start","stop","date","Date","now","autoStart","ref","intervalDelay","renderer","minutes","seconds","React","SuccessAuthForm","email","className","classNames","hidden","type","title","id","defaultValue","editType","USER_INFO_SIGNUP","verifyType","formWrapClass","useState","isSend","setIsSend","isSendable","setIsSendable","placeHolder","setPlaceHolder","setReStartCountDown","codeRef","dispatch","useDispatch","reqType","USER_INFO_EMAIL","useSelector","state","authCode","useForm","register","trigger","getValues","setValue","control","clearErrors","errors","formState","watchCode","useWatch","name","watchEmail","t","useTranslation","onAuthCode","useCallback","reqAuthCode","verify_source","VERIFY_SEND_SOURCE_EMAIL","verify_type","code","onResetCode","authCodeReset","onAuthEmail","contents","showPopup","POPUP_TYPE_LOGIN_ALERT","reqAuthEmail","onResetEmail","authEmailReset","setTimeout","AUTH_SEND_EMAIL_INTERVAL","account","default","placeholder","required","require","pattern","value","message","disabled","USER_INFO_EDIT","onClick","maxLength","AUTH_CODE_LENGTH","SEND_AUTH_CODE_TIME_LIMIT","length","InitNickname","nickname","tag","setStatus","readOnly","NICKNAME_STATUS_CHANGE","SaveNickname","newNick","setNewNick","onEditNickname","onChange","e","target","nickName","role","CompleteNickname","GuideMessage","status","style","display","NICKNAME_STATUS_INIT","user","visibleInfo","nickStatus","setNickStatus","setErrors","changeNickname","accountInfo","error","popup","reqChangeNickname","nickname_is_new","NICKNAME_STATUS_SAVED","updateNicknameStatus","POPUP_TYPE_NICKNAME_CONFIRM","phone","AuthConfirm","VERIFY_SEND_TYPE_CHANGE","defaultChecked","htmlFor","AccountInfo","setVisibleInfo","logIn","Header","Footer","path","element"],"sourceRoot":""}